// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–µ—Ä–∞ –≤–º–µ—Å—Ç–æ p-limit
import { xmlStockClient } from './xmlstock';
import { pageExtractor } from './fetchPage';
import { gcpNlClient } from './gcpNl';
import { openRouterClient } from './openrouter';
import { cacheManager } from './cache';
import { normalizEntityName } from './lemmatization';
import { 
  SearchParams, 
  PipelineResult, 
  XmlStockResult, 
  PageExtract, 
  EntityItem, 
  AggregateEntity,
  CacheKey,
  UserPageAnalysis,
  ComparisonResult
} from './types';

export class AnalysisPipeline {
  private concurrencyLimit = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞

  async runAnalysis(params: SearchParams): Promise<PipelineResult> {
    const startTime = Date.now();
    const cacheKey: CacheKey = {
      query: params.query,
      country: params.country || 'us',
      lang: params.lang || 'en',
      device: params.device || 'desktop',
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedResult = await cacheManager.getAnalysisResult(cacheKey);
    if (cachedResult) {
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞');
      return cachedResult;
    }

    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', params.query);

    try {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –¢–û–ü-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const top10 = await this.fetchTop10Results(params);
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–æ ${top10.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ XMLStock`);
      console.log(`üìã –ü–µ—Ä–≤—ã–µ 3 URL:`, top10.slice(0, 3).map(r => r.url));

      // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü
      const { extracts: pageExtracts, errors: extractionErrors } = await this.fetchAndExtractPages(top10);
      console.log(`üìÑ –ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —Å ${pageExtracts.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);

      // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
      const perUrlEntities = await this.analyzeEntities(pageExtracts, params.lang);
      console.log('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π');

      // –®–∞–≥ 4: –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const aggregateEntities = this.aggregateEntities(perUrlEntities);
      console.log(`–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ ${aggregateEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π`);

      // –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      let userPageAnalysis;
      let comparison;
      if (params.userUrl) {
        userPageAnalysis = await this.analyzeUserPage(params.userUrl, params.lang);
        comparison = await this.compareWithTop10(userPageAnalysis, aggregateEntities, params.query);
        console.log('–ó–∞–≤–µ—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      }

      // –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Å –ø–æ–º–æ—â—å—é LLM
      const llmSummary = await this.generateSummary(params.query, top10, aggregateEntities, perUrlEntities, comparison);
      console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤–æ–¥–∫–∞');

      const result: PipelineResult = {
        top10,
        perUrlEntities,
        aggregate: aggregateEntities,
        llmSummary,
        userPageAnalysis,
        comparison,
        errors: extractionErrors,
        processingTime: Date.now() - startTime,
        timestamp: new Date().toISOString(),
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await cacheManager.setAnalysisResult(cacheKey, result);

      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ pipeline:', error);
      throw error;
    }
  }

  private async fetchTop10Results(params: SearchParams): Promise<XmlStockResult[]> {
    try {
      return await xmlStockClient.searchTop10(params);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¢–û–ü-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private async fetchAndExtractPages(top10: XmlStockResult[]): Promise<{ extracts: PageExtract[], errors: Record<string, string> }> {
    const results: PageExtract[] = [];
    const errors: Record<string, string> = {};
    
    console.log(`üåê –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è ${top10.length} URL`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    for (let i = 0; i < top10.length; i += this.concurrencyLimit) {
      const batch = top10.slice(i, i + this.concurrencyLimit);
      const batchPromises = batch.map(async (result) => {
        try {
          console.log(`–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å: ${result.url}`);
          const extract = await pageExtractor.fetchAndExtract(result.url);
          console.log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${extract.text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          return {
            ...extract,
            title: extract.title || result.title,
          };
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å ${result.url}:`, error);
          const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          errors[result.url] = errorMessage;
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
          return {
            url: result.url,
            title: result.title,
            text: result.snippet || result.title,
            wordCount: (result.snippet || result.title).split(' ').length,
            error: errorMessage,
          };
        }
      });
      
      const batchResults = await Promise.all(batchPromises);
      results.push(...batchResults);
    }
    
    console.log(`üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ ${results.length} —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Å–µ–≥–æ`);
    console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π:`);
    results.forEach((r, i) => {
      console.log(`  [${i}] ${r.url}: text.length=${r.text?.length || 0}, hasError=${!!r.error}`);
    });
    
    const filtered = results.filter(extract => extract.text && extract.text.length > 10);
    console.log(`üìù –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: ${filtered.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    
    return { extracts: filtered, errors };
  }

  private async analyzeEntities(pageExtracts: PageExtract[], searchLang?: string): Promise<Record<string, EntityItem[]>> {
    const perUrlEntities: Record<string, EntityItem[]> = {};
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    for (let i = 0; i < pageExtracts.length; i += this.concurrencyLimit) {
      const batch = pageExtracts.slice(i, i + this.concurrencyLimit);
      const batchPromises = batch.map(async (extract) => {
        try {
          console.log(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è: ${extract.url}`);
          const allEntities = await gcpNlClient.analyzeEntities(extract.text, extract.url, searchLang);
          console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${allEntities.length}`);
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ —Å—É—â–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
          const entities = allEntities.filter(entity => {
            // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∏–ø—ã (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            const excludedTypes = ['UNKNOWN', 'NUMBER', 'PHONE_NUMBER'];
            if (excludedTypes.includes(entity.type)) {
              console.log(`–ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å ${entity.name} (—Ç–∏–ø: ${entity.type})`);
              return false;
            }
            
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
            if (!entity.name || entity.name.trim().length < 2) {
              console.log(`–ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º: ${entity.name}`);
              return false;
            }
            
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Ü–∏—Ñ—Ä
            if (/^[.,!?;:()\[\]{}"'`~@#$%^&*+=|\\/<>0-9\s]+$/.test(entity.name)) {
              console.log(`–ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —Å —Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è: ${entity.name}`);
              return false;
            }
            
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–º salience
            if (entity.salience < 0.001) {
              console.log(`–ò—Å–∫–ª—é—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —Å –Ω–∏–∑–∫–∏–º salience: ${entity.name} (${entity.salience})`);
              return false;
            }
            
            return true;
          });
          
          console.log(`–û—Å—Ç–∞–ª–æ—Å—å —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${entities.length}`);
          
          if (entities.length > 0) {
            console.log(`‚ú® –ü–µ—Ä–≤—ã–µ 3 —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è ${extract.url}:`, entities.slice(0, 3).map(e => ({
              name: e.name,
              type: e.type,
              salience: e.salience
            })));
          }
          
          return { url: extract.url, entities };
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è ${extract.url}:`, error);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          console.log(`–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏ –¥–ª—è ${extract.url}: ${errorMessage}`);
          
          return { url: extract.url, entities: [] };
        }
      });
      
      const batchResults = await Promise.all(batchPromises);
      console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ batch: ${batchResults.length}`);
      
      batchResults.forEach((result, index) => {
        console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç #${index}:`, {
          hasResult: !!result,
          hasUrl: result?.url,
          hasEntities: result?.entities,
          entitiesLength: result?.entities?.length
        });
        
        if (result && result.url && result.entities && result.entities.length > 0) {
          perUrlEntities[result.url] = result.entities;
          console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${result.entities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è ${result.url}`);
        } else if (result && result.url) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è ${result.url}`);
        } else {
          console.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç #${index}`);
        }
      });
    }

    console.log(`üìä –ò—Ç–æ–≥–æ –≤ perUrlEntities: ${Object.keys(perUrlEntities).length} URL`);
    Object.entries(perUrlEntities).forEach(([url, entities]) => {
      console.log(`  - ${url}: ${entities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π`);
    });
    
    return perUrlEntities;
  }

  private aggregateEntities(perUrlEntities: Record<string, EntityItem[]>): AggregateEntity[] {
    console.log('=== AGGREGATE ENTITIES START ===');
    console.log('perUrlEntities keys:', Object.keys(perUrlEntities));
    console.log('perUrlEntities values:', Object.values(perUrlEntities).map(entities => entities.length));
    
    const entityMap = new Map<string, AggregateEntity>();

    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏, –∏—Å–∫–ª—é—á–∞—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∏–ø—ã
    Object.entries(perUrlEntities).forEach(([url, entities]) => {
      entities.forEach(entity => {
        // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è SEO
        if (['UNKNOWN', 'NUMBER', 'PHONE_NUMBER'].includes(entity.type)) {
          return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
        const lemma = normalizEntityName(entity.name, 'ru');
        
        if (!lemma) return;
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (lemma === '—Å–∞–π—Ç') {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å: "${entity.name}" -> –ª–µ–º–º–∞: "${lemma}"`);
        }
        
        if (entityMap.has(lemma)) {
          const existing = entityMap.get(lemma)!;
          existing.totalSalience += entity.salience;
          existing.docCount += 1;
          existing.sampleMentions += entity.mentions;
          if (!existing.sources.includes(url)) {
            existing.sources.push(url);
          }
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
          if (!existing.originalForms) {
            existing.originalForms = [];
          }
          if (!existing.originalForms.includes(entity.name)) {
            existing.originalForms.push(entity.name);
          }
        } else {
          entityMap.set(lemma, {
            name: lemma, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–º–º—É –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
            type: entity.type,
            totalSalience: entity.salience,
            docCount: 1,
            sampleMentions: entity.mentions,
            sources: [url],
            avgSalience: entity.salience,
            originalForms: [entity.name], // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
            formsCount: 1,
          });
        }
      });
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π salience, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const aggregated = Array.from(entityMap.values())
      .map(entity => ({
        ...entity,
        avgSalience: entity.totalSalience / entity.docCount,
        formsCount: entity.originalForms?.length || 1,
      }))
      .sort((a, b) => {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ—Ç–æ–º –ø–æ –æ–±—â–µ–º—É salience
        if (b.docCount !== a.docCount) {
          return b.docCount - a.docCount;
        }
        return b.totalSalience - a.totalSalience;
      })
      .slice(0, 50); // –¢–æ–ø-50 —Å—É—â–Ω–æ—Å—Ç–µ–π

    console.log(`–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ ${aggregated.length} —Å—É—â–Ω–æ—Å—Ç–µ–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã "—Å–∞–π—Ç"
    const siteEntities = aggregated.filter(e => e.name.includes('—Å–∞–π—Ç'));
    if (siteEntities.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${siteEntities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–æ —Å–ª–æ–≤–æ–º "—Å–∞–π—Ç":`, 
        siteEntities.map(e => ({ name: e.name, forms: e.originalForms })));
    }
    
    console.log('=== AGGREGATE ENTITIES END ===');
    
    return aggregated;
  }

  private async generateSummary(
    query: string,
    top10: XmlStockResult[],
    aggregateEntities: AggregateEntity[],
    perUrlEntities: Record<string, EntityItem[]>,
    comparison?: ComparisonResult
  ): Promise<string> {
    try {
      return await openRouterClient.generateAnalysis(query, top10, aggregateEntities, perUrlEntities, comparison);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–≤–æ–¥–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return this.generateFallbackSummary(aggregateEntities, comparison);
    }
  }

  private generateFallbackSummary(aggregateEntities: AggregateEntity[], comparison?: ComparisonResult): string {
    const topEntities = aggregateEntities.slice(0, 10);
    
    let summary = `## –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π\n\n`;
    summary += `–ù–∞–π–¥–µ–Ω–æ ${aggregateEntities.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ –¢–û–ü-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.\n\n`;
    
    summary += `### –¢–æ–ø-10 —Å—É—â–Ω–æ—Å—Ç–µ–π:\n\n`;
    topEntities.forEach((entity, index) => {
      summary += `${index + 1}. **${entity.name}** (${entity.type})\n`;
      summary += `   - –í—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ ${entity.docCount} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n`;
      summary += `   - –û–±—â–∏–π salience: ${entity.totalSalience.toFixed(3)}\n\n`;
    });

    summary += `### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n`;
    summary += `1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—É—â–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n`;
    summary += `2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π\n`;
    summary += `3. –£—á—Ç–∏—Ç–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (comparison) {
      summary += `\n### –ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n\n`;
      summary += `- URL: ${comparison.userPage.url}\n`;
      summary += `- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: ${comparison.userPage.wordCount}\n`;
      summary += `- –ù–∞–π–¥–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: ${comparison.userPage.entityCount}\n`;
      summary += `- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: ${comparison.missingEntities.length}\n\n`;
      
      if (comparison.recommendations.length > 0) {
        summary += `### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:\n\n`;
        comparison.recommendations.forEach((rec, index) => {
          summary += `${index + 1}. ${rec}\n`;
        });
      }
    }

    return summary;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
  async clearCache(params: SearchParams): Promise<void> {
    const cacheKey: CacheKey = {
      query: params.query,
      country: params.country || 'us',
      lang: params.lang || 'en',
      device: params.device || 'desktop',
    };
    
    await cacheManager.invalidateAnalysis(cacheKey);
  }

  async clearAllCache(): Promise<void> {
    await cacheManager.clear();
  }

  // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async analyzeUserPage(url: string, searchLang?: string): Promise<UserPageAnalysis> {
    try {
      console.log('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', url);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageExtract = await pageExtractor.fetchAndExtract(url);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
      const allEntities = await gcpNlClient.analyzeEntities(pageExtract.text, url, searchLang);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å—É—â–Ω–æ—Å—Ç–µ–π
      const entities = allEntities.filter(entity => 
        !['OTHER', 'UNKNOWN', 'NUMBER', 'PHONE_NUMBER'].includes(entity.type)
      );
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-—Å—É—â–Ω–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ 10)
      const topEntities = entities
        .sort((a, b) => b.salience - a.salience)
        .slice(0, 10);
      
      return {
        url,
        title: pageExtract.title,
        entities,
        wordCount: pageExtract.wordCount || pageExtract.text.split(/\s+/).length,
        entityCount: entities.length,
        topEntities,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É ${url}: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¢–û–ü-10
  async compareWithTop10(
    userPage: UserPageAnalysis, 
    top10Entities: AggregateEntity[], 
    query: string
  ): Promise<ComparisonResult> {
    try {
      console.log('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¢–û–ü-10');
      
      // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¢–û–ü-10, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const userEntityLemmas = new Set(
        userPage.entities.map(e => normalizEntityName(e.name, 'ru'))
      );
      const missingEntities = top10Entities.filter(
        entity => !userEntityLemmas.has(normalizEntityName(entity.name, 'ru'))
      );
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ (docCount * avgSalience)
      missingEntities.sort((a, b) => (b.docCount * b.avgSalience) - (a.docCount * a.avgSalience));
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å —Å—É—â–Ω–æ—Å—Ç–µ–π
      const entityGaps = missingEntities.slice(0, 10).map(entity => {
        const importance = entity.docCount >= 3 && entity.avgSalience >= 0.01 ? 'high' :
                          entity.docCount >= 2 && entity.avgSalience >= 0.005 ? 'medium' : 'low';
        
        const recommendation = this.generateEntityRecommendation(entity, importance);
        
        return {
          entity,
          importance,
          recommendation,
        };
      });
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = this.generateRecommendations(userPage, missingEntities, query);
      
      return {
        userPage,
        top10Entities: top10Entities.slice(0, 20), // –¢–æ–ø-20 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        missingEntities: missingEntities.slice(0, 10),
        recommendations,
        entityGaps,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¢–û–ü-10:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private generateEntityRecommendation(entity: AggregateEntity, importance: 'high' | 'medium' | 'low'): string {
    const baseRecommendation = `–î–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "${entity.name}" –≤ –∫–æ–Ω—Ç–µ–Ω—Ç`;
    
    switch (importance) {
      case 'high':
        return `${baseRecommendation}. –≠—Ç–∞ —Å—É—â–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ ${entity.docCount} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –¢–û–ü-10 –∏ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–∞–∂–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—å –≤ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö.`;
      case 'medium':
        return `${baseRecommendation}. –°—É—â–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ ${entity.docCount} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞.`;
      case 'low':
        return `${baseRecommendation}. –ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.`;
      default:
        return baseRecommendation;
    }
  }

  private generateRecommendations(userPage: UserPageAnalysis, missingEntities: AggregateEntity[], query: string): string[] {
    const recommendations: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    if (userPage.wordCount < 500) {
      recommendations.push('–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ –º–∏–Ω–∏–º—É–º 500-800 —Å–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π
    if (userPage.entityCount < 10) {
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π (–±—Ä–µ–Ω–¥—ã, –∏–º–µ–Ω–∞, –º–µ—Å—Ç–∞) –≤ –∫–æ–Ω—Ç–µ–Ω—Ç');
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    const highImportanceMissing = missingEntities.filter(e => 
      e.docCount >= 3 && e.avgSalience >= 0.01
    );
    
    if (highImportanceMissing.length > 0) {
      recommendations.push(`–î–æ–±–∞–≤–∏—Ç—å ${highImportanceMissing.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    recommendations.push('–°–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ H2/H3');
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å FAQ —Ä–∞–∑–¥–µ–ª —Å –∫–ª—é—á–µ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–µ–º–µ');
    
    return recommendations;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getCacheStats() {
    return cacheManager.getCacheStats();
  }
}

export const analysisPipeline = new AnalysisPipeline();

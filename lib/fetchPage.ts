import { JSDOM } from 'jsdom';
import { Readability } from '@mozilla/readability';
import { PageExtract } from './types';

export class PageExtractor {
  private maxRetries = 3;
  private timeout = 15000; // 15 —Å–µ–∫—É–Ω–¥
  private maxContentLength = 150000; // ~150KB —Å–∏–º–≤–æ–ª–æ–≤

  async fetchAndExtract(url: string): Promise<PageExtract> {
    console.log(`ü§ñ –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å Googlebot User-Agent: ${url}`);
    let lastError: Error | null = null;
    let isJavaScriptHeavy = false;
    let hasRedirect = false;

    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        const html = await this.fetchHtml(url, attempt);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ JavaScript-heavy —Å–∞–π—Ç—ã
        if (this.isJavaScriptHeavy(html)) {
          isJavaScriptHeavy = true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
        if (this.hasRedirect(html)) {
          hasRedirect = true;
        }
        
        const extract = await this.extractContent(html, url);
        
        if (extract.text.length > 100) { // –ú–∏–Ω–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤
          return extract;
        }
        
        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –Ω–æ –º—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
        if (isJavaScriptHeavy) {
          return {
            url,
            title: this.extractTitle(html),
            text: '',
            wordCount: 0,
            error: '–°–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JavaScript –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (SPA)'
          };
        }
        
        if (hasRedirect) {
          return {
            url,
            title: this.extractTitle(html),
            text: '',
            wordCount: 0,
            error: '–°–∞–π—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç'
          };
        }
        
        throw new Error('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
      } catch (error) {
        lastError = error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        
        if (attempt < this.maxRetries) {
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
          const delay = Math.pow(2, attempt) * 1000;
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å ${url}`;
    
    if (isJavaScriptHeavy) {
      errorMessage += ': –°–∞–π—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JavaScript –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (SPA)';
    } else if (hasRedirect) {
      errorMessage += ': –°–∞–π—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç';
    } else if (lastError?.message.includes('HTTP 403')) {
      errorMessage += ': –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403)';
    } else if (lastError?.message.includes('HTTP 404')) {
      errorMessage += ': –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)';
    } else if (lastError?.message.includes('timeout')) {
      errorMessage += ': –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
    } else {
      errorMessage += `: ${lastError?.message}`;
    }

    throw new Error(errorMessage);
  }

  private async fetchHtml(url: string, attempt: number): Promise<string> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), this.timeout);

    try {
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º User-Agent Googlebot –¥–ª—è –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏ –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ HTML
          'User-Agent': 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'en-US,en;q=0.5',
          'Accept-Encoding': 'gzip, deflate, br',
          'Connection': 'keep-alive',
          'Upgrade-Insecure-Requests': '1',
        },
        signal: controller.signal,
        redirect: 'follow',
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const contentType = response.headers.get('content-type') || '';
      if (!contentType.includes('text/html')) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π content-type: ${contentType}`);
      }

      const html = await response.text();
      
      if (html.length < 500) {
        throw new Error('HTML —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
      }

      return html;
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }

  private async extractContent(html: string, url: string): Promise<PageExtract> {
    try {
      // –°–æ–∑–¥–∞–µ–º DOM –∏–∑ HTML
      const dom = new JSDOM(html, {
        url: url,
        resources: 'usable',
      });

      const document = dom.window.document;
      
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Readability
      const reader = new Readability(document, {
        debug: false,
        maxElemsToParse: 2000,
        nbTopCandidates: 5,
        charThreshold: 500,
        classesToPreserve: [],
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        keepClasses: false,
        removeUnlikelyCandidates: true,
        weightClasses: true,
        cleanConditionally: true,
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏/ID
        ignoreClasses: [
          'ad', 'ads', 'advertisement', 'banner', 'sidebar', 'menu', 
          'navigation', 'social', 'share', 'comments', 'related',
          'widget', 'popup', 'modal', 'overlay', 'cookie'
        ],
        ignoreIds: [
          'ad', 'ads', 'advertisement', 'banner', 'sidebar', 'menu',
          'navigation', 'social', 'share', 'comments', 'related',
          'widget', 'popup', 'modal', 'overlay', 'cookie'
        ]
      });

      const article = reader.parse();
      
      if (article && article.textContent && article.textContent.length > 200) {
        let cleanText = this.cleanText(article.textContent);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è Google NLP API
        cleanText = this.prepareForGoogleNLP(cleanText);
        
        const title = article.title || this.extractTitle(document);
        
        return {
          url,
          title,
          text: this.truncateText(cleanText),
          wordCount: this.countWords(cleanText),
        };
      }

      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
      return this.extractWithHeuristics(document, url);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  }

  private extractWithHeuristics(document: Document, url: string): PageExtract {
    // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const unwantedSelectors = [
      'script', 'style', 'nav', 'header', 'footer', 'aside', 'noscript',
      '.advertisement', '.ads', '.sidebar', '.menu', '.navigation',
      '.cookie-banner', '.popup', '.modal', '.overlay', '.banner',
      '.social', '.share', '.comments', '.related', '.recommended',
      '.widget', '.sidebar-widget', '.ad-container', '.sponsored',
      '[role="banner"]', '[role="navigation"]', '[role="complementary"]',
      '.hidden', '.sr-only', '.visually-hidden', '.screen-reader-only'
    ];

    unwantedSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(el => el.remove());
    });

    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏–º–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    const unwantedAttributes = ['data-ad', 'data-ads', 'id*="ad"', 'class*="ad"'];
    unwantedAttributes.forEach(attr => {
      const elements = document.querySelectorAll(`[${attr}]`);
      elements.forEach(el => el.remove());
    });

    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const contentSelectors = [
      'main', 'article', '.content', '.post', '.entry',
      '.article-content', '.post-content', '.main-content'
    ];

    let contentElement: Element | null = null;

    for (const selector of contentSelectors) {
      contentElement = document.querySelector(selector);
      if (contentElement) break;
    }

    if (!contentElement) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º body –∫–∞–∫ fallback
      contentElement = document.body;
    }

    if (!contentElement) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }

    const text = contentElement.textContent || '';
    let cleanText = this.cleanText(text);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è Google NLP API
    cleanText = this.prepareForGoogleNLP(cleanText);
    
    const title = this.extractTitle(document);

    console.log(`–ò–∑–≤–ª–µ—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è ${url}: ${cleanText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞:`, cleanText.substring(0, 200));

    return {
      url,
      title,
      text: this.truncateText(cleanText),
      wordCount: this.countWords(cleanText),
    };
  }

  private extractTitle(document: Document): string {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const titleSelectors = [
      'h1',
      'title',
      '.title',
      '.headline',
      '.post-title',
      '.article-title'
    ];

    for (const selector of titleSelectors) {
      const element = document.querySelector(selector);
      if (element && element.textContent) {
        const title = element.textContent.trim();
        if (title.length > 5 && title.length < 200) {
          return title;
        }
      }
    }

    return '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞';
  }

  private isJavaScriptHeavy(html: string): boolean {
    const jsHeavyIndicators = [
      '<div id="root"></div>',
      '<div id="app"></div>',
      '<div id="__next"></div>',
      'data-react-helmet',
      'data-next-head',
      'window.__NEXT_DATA__',
      'window.__NUXT__',
      'window.__VUE__',
      'window.__INITIAL_STATE__',
      'noscript',
      'script src="/_next/static',
      'script src="/static/js',
      'script defer',
      'script async'
    ];
    
    return jsHeavyIndicators.some(indicator => html.includes(indicator));
  }

  private hasRedirect(html: string): boolean {
    const redirectIndicators = [
      '307 Temporary Redirect',
      '302 Found',
      '301 Moved Permanently',
      'meta http-equiv="refresh"',
      'window.location.href',
      'window.location.replace'
    ];
    
    return redirectIndicators.some(indicator => html.includes(indicator));
  }

  private cleanText(text: string): string {
    return text
      // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
      .replace(/<[^>]*>/g, '')
      // –£–¥–∞–ª—è–µ–º JavaScript –∫–æ–¥
      .replace(/javascript:/gi, '')
      .replace(/function\s*\([^)]*\)\s*\{[^}]*\}/g, '')
      // –£–¥–∞–ª—è–µ–º CSS –∫–æ–¥
      .replace(/\{[^}]*\}/g, '')
      .replace(/@[^{]*\{[^}]*\}/g, '')
      // –£–¥–∞–ª—è–µ–º URL –∏ email
      .replace(/https?:\/\/[^\s]+/g, '')
      .replace(/www\.[^\s]+/g, '')
      .replace(/[^\s]+@[^\s]+/g, '')
      // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –±–∞–∑–æ–≤—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
      .replace(/[^\w\s\-.,!?();:–∞-—è—ë]/gi, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
      .replace(/\s+/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –æ–¥–∏–Ω
      .replace(/\n+/g, ' ')
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      .replace(/\s+([.,!?;:])/g, '$1')
      .replace(/([.,!?;:])\s+/g, '$1 ')
      .trim();
  }

  private prepareForGoogleNLP(text: string): string {
    return text
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–¥—ã
      .replace(/[A-Z]{2,}/g, '') // –£–¥–∞–ª—è–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
      .replace(/\d{4,}/g, '') // –£–¥–∞–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ (–∫–æ–¥—ã, ID)
      .replace(/[a-f0-9ac-f]{8,}/gi, '') // –£–¥–∞–ª—è–µ–º —Ö–µ—à–∏ –∏ UUID
      
      // –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å–ª–æ–≤
      .replace(/[.,!?;:()\[\]{}"'`~@#$%^&*+=|\\/<>]+/g, ' ')
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
      .replace(/\b(\w+)\s+\1\b/gi, '$1') // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞
      
      // –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ "—Å–ª–æ–≤–∞" –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
      .replace(/\b\w{1,2}\b/g, ' ')
      
      // –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
      .replace(/\b\d+\b/g, ' ')
      
      // –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±—É–∫–≤–∞–º–∏ (–∫–æ–¥—ã, –≤–µ—Ä—Å–∏–∏)
      .replace(/\b\w*\d+\w*\b/g, ' ')
      
      // –£–¥–∞–ª—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã
      .replace(/^[.,!?;:\s]+$/gm, '')
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
      .split('\n')
      .filter(line => line.trim().length >= 3)
      .join('\n')
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      .replace(/[^\w\s–∞-—è—ë]/gi, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }

  private truncateText(text: string): string {
    if (text.length <= this.maxContentLength) {
      return text;
    }

    // –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
    const sentences = text.split(/[.!?]+/);
    let result = '';
    
    for (const sentence of sentences) {
      if ((result + sentence).length > this.maxContentLength) {
        break;
      }
      result += sentence + '.';
    }

    return result || text.substring(0, this.maxContentLength);
  }

  private countWords(text: string): number {
    return text.split(/\s+/).filter(word => word.length > 0).length;
  }
}

export const pageExtractor = new PageExtractor();
